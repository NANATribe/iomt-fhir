// -------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.
// -------------------------------------------------------------------------------------------------

using System.Collections.Generic;
using EnsureThat;
using Microsoft.Health.Common.Telemetry;
using Microsoft.Health.Fhir.Ingest.Data;

namespace Microsoft.Health.Fhir.Ingest.Telemetry
{
    /// <summary>
    /// Defines known metrics and metric dimensions for use in Application Insights
    /// </summary>
    public static class IomtMetrics
    {
        private static string _nameDimension = DimensionNames.Name;
        private static string _categoryDimension = DimensionNames.Category;
        private static string _errorTypeDimension = DimensionNames.ErrorType;
        private static string _errorSeverityDimension = DimensionNames.ErrorSeverity;
        private static string _operationDimension = DimensionNames.Operation;
        private static string _partitionDimension = DimensionNames.Identifier;

        private static Metric _deviceIngressSizeBytes = CreateBaseIomtMetric(IomtMetricName.DeviceIngressSizeBytes, Category.Traffic, ConnectorOperation.Normalization);

        private static Metric _notSupported = new Metric(
            "NotSupportedException",
            new Dictionary<string, object>
            {
                { _nameDimension, "NotSupportedException" },
                { _categoryDimension, Category.Errors },
                { _errorTypeDimension, ErrorType.FHIRResourceError },
                { _errorSeverityDimension, ErrorSeverity.Warning },
                { _operationDimension, ConnectorOperation.FHIRConversion },
            });

        /// <summary>
        /// The latency between event ingestion and output to FHIR processor.
        /// </summary>
        /// <param name="partitionId">The partition id of the input events being consumed from the event hub partition </param>
        public static Metric MeasurementIngestionLatency(string partitionId = null)
        {
            return CreateBaseIomtMetric(IomtMetricName.MeasurementIngestionLatency, Category.Latency, ConnectorOperation.FHIRConversion)
                .AddDimension(_partitionDimension, partitionId);
        }

        /// <summary>
        /// The latency between event ingestion and output to FHIR processor, in milliseconds.
        /// </summary>
        /// <param name="partitionId">The partition id of the input events being consumed from the event hub partition </param>
        public static Metric MeasurementIngestionLatencyMs(string partitionId = null)
        {
            return CreateBaseIomtMetric(IomtMetricName.MeasurementIngestionLatencyMs, Category.Latency, ConnectorOperation.FHIRConversion)
                .AddDimension(_partitionDimension, partitionId);
        }

        /// <summary>
        /// The number of measurement groups generated by the FHIR processor based on provided input.
        /// </summary>
        /// <param name="partitionId">The partition id of the input events being consumed from the event hub partition </param>
        public static Metric MeasurementGroup(string partitionId = null)
        {
            return CreateBaseIomtMetric(IomtMetricName.MeasurementGroup, Category.Traffic, ConnectorOperation.FHIRConversion)
                .AddDimension(_partitionDimension, partitionId);
        }

        /// <summary>
        /// The number of measurement readings to import to FHIR.
        /// </summary>
        /// <param name="partitionId">The partition id of the input events being consumed from the event hub partition </param>
        public static Metric Measurement(string partitionId = null)
        {
            return CreateBaseIomtMetric(IomtMetricName.Measurement, Category.Traffic, ConnectorOperation.FHIRConversion)
                .AddDimension(_partitionDimension, partitionId);
        }

        /// <summary>
        /// The number of input events received.
        /// </summary>
        /// <param name="partitionId">The partition id of the events being consumed from the event hub partition </param>
        public static Metric DeviceEvent(string partitionId = null)
        {
            return CreateBaseIomtMetric(IomtMetricName.DeviceEvent, Category.Traffic, ConnectorOperation.Normalization)
                .AddDimension(_partitionDimension, partitionId);
        }

        /// <summary>
        /// The number of normalized events generated for further processing.
        /// </summary>
        /// <param name="partitionId">The partition id of the events being consumed from the event hub partition </param>
        public static Metric NormalizedEvent(string partitionId = null)
        {
            return CreateBaseIomtMetric(IomtMetricName.NormalizedEvent, Category.Traffic, ConnectorOperation.Normalization)
                .AddDimension(_partitionDimension, partitionId);
        }

        /// <summary>
        /// The latency between the event ingestion time and normalization processing. An increase here indicates a backlog of messages to process.
        /// </summary>
        /// <param name="partitionId">The partition id of the events being consumed from the event hub partition </param>
        public static Metric DeviceEventProcessingLatency(string partitionId = null)
        {
           return CreateBaseIomtMetric(IomtMetricName.DeviceEventProcessingLatency, Category.Latency, ConnectorOperation.Normalization)
                .AddDimension(_partitionDimension, partitionId);
        }

        /// <summary>
        /// The latency between the event ingestion time and normalization processing, in milliseconds. An increase here indicates a backlog of messages to process.
        /// </summary>
        /// <param name="partitionId">The partition id of the events being consumed from the event hub partition </param>
        public static Metric DeviceEventProcessingLatencyMs(string partitionId = null)
        {
            return CreateBaseIomtMetric(IomtMetricName.DeviceEventProcessingLatencyMs, Category.Latency, ConnectorOperation.Normalization)
                .AddDimension(_partitionDimension, partitionId);
        }

        /// <summary>
        /// A metric that measures the amount of data (in bytes) ingested by normalization processing.
        /// </summary>
        public static Metric DeviceIngressSizeBytes()
        {
            return _deviceIngressSizeBytes;
        }

        /// <summary>
        /// A metric for when FHIR resource does not support the provided type as a value.
        /// </summary>
        public static Metric NotSupported()
        {
            return _notSupported;
        }

        /// <summary>
        /// A metric for when a FHIR resource has been saved.
        /// </summary>
        /// <param name="resourceType">The type of FHIR resource that was saved.</param>
        /// <param name="resourceOperation">The operation performed on the FHIR resource.</param>
        public static Metric FhirResourceSaved(ResourceType resourceType, ResourceOperation resourceOperation)
        {
            return new Metric(
                "FhirResourceSaved",
                new Dictionary<string, object>
                {
                    { _nameDimension, $"{resourceType}{resourceOperation}" },
                    { _categoryDimension, Category.Traffic },
                    { _operationDimension, ConnectorOperation.FHIRConversion },
                });
        }

        public static Metric UnhandledException(string exceptionName, string connectorStage)
        {
            EnsureArg.IsNotNull(exceptionName);
            return new Metric(
                "UnhandledException",
                new Dictionary<string, object>
                {
                    { _nameDimension, exceptionName },
                    { _categoryDimension, Category.Errors },
                    { _errorTypeDimension, ErrorType.GeneralError },
                    { _errorSeverityDimension, ErrorSeverity.Critical },
                    { _operationDimension, connectorStage },
                });
        }

        public static Metric HandledException(string exceptionName, string connectorStage)
        {
            return new Metric(
                exceptionName,
                new Dictionary<string, object>
                {
                    { _nameDimension, exceptionName },
                    { _categoryDimension, Category.Errors },
                    { _errorTypeDimension, ErrorType.GeneralError },
                    { _errorSeverityDimension, ErrorSeverity.Critical },
                    { _operationDimension, connectorStage },
                });
        }

        private static Metric CreateBaseIomtMetric(IomtMetricName metricName, string category, string operation)
        {
            var metricNameString = metricName.ToString();
            return new Metric(
                metricNameString,
                new Dictionary<string, object>
                {
                    { _nameDimension, metricNameString },
                    { _categoryDimension, category },
                    { _operationDimension, operation },
                });
        }
    }
}
